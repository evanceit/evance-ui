@use 'sass:map' as map;
@use '../tools/functions' as *;
/*
  # Variables

  Includes the following sections:
  - Breakpoints
  - Spacers
  - Text
 */

/*
    ## Breakpoints

    Breakpoints should always be defined in `px` units.

    By default we have five breakpoints for:
    - `xs` - Extra Small: phones in portrait
    - `sm` - Small: Phones in landscape
    - `md` - Medium: Tablets in portrait or small notebooks
    - `lg` - Large: Desktops & tablets in landscape. More than accommodates scroll bars.
    - `xl` - Extra Large - Large Desktops, including 1080p
    - `xxl` - Extra Large - 4k and ultra-wide screens

    Scaling, such as font-size scaling, is done between `sm-min` and `xl-min`.
 */
$breakpoint-xs: 0px;
$breakpoint-sm: 600px;
$breakpoint-md: 960px;
$breakpoint-lg: 1200px;
$breakpoint-xl: 1600px;
$breakpoint-xxl: 2400px;

$grid-breakpoints: (
    xs: $breakpoint-xs,
    sm: $breakpoint-sm,
    md: $breakpoint-md,
    lg: $breakpoint-lg,
    xl: $breakpoint-xl,
    xxl: $breakpoint-xxl
) !default;


/**
    ## Display Breakpoints

    Avoid using '*-and-down' where possible
 */
$display-breakpoints: () !default;
$display-breakpoints: map-deep-merge(
    (
        'print-only': 'only print',
        'screen-only': 'only screen',
        'xs-only': '(max-width: #{map.get($grid-breakpoints, 'sm') - 0.02})',
        'sm-only': '(min-width: #{map.get($grid-breakpoints, 'sm')}) and (max-width: #{map.get($grid-breakpoints, 'md') - 0.02})',
        'md-only': '(min-width: #{map.get($grid-breakpoints, 'md')}) and (max-width: #{map.get($grid-breakpoints, 'lg') - 0.02})',
        'lg-only': '(min-width: #{map.get($grid-breakpoints, 'lg')}) and (max-width: #{map.get($grid-breakpoints, 'xl') - 0.02})',
        'xl-only': '(min-width: #{map.get($grid-breakpoints, 'xl')}) and (max-width: #{map.get($grid-breakpoints, 'xxl') - 0.02})',
        'xxl-only': '(min-width: #{map.get($grid-breakpoints, 'xxl')})',
        'xs-up': '(min-width: #{map.get($grid-breakpoints, 'xs')})',
        'sm-up': '(min-width: #{map.get($grid-breakpoints, 'sm')})',
        'md-up': '(min-width: #{map.get($grid-breakpoints, 'md')})',
        'lg-up': '(min-width: #{map.get($grid-breakpoints, 'lg')})',
        'xl-up': '(min-width: #{map.get($grid-breakpoints, 'xl')})',
        'xxl-up': '(min-width: #{map.get($grid-breakpoints, 'xxl')})',
        'sm-down': '(max-width: #{map.get($grid-breakpoints, 'md') - 0.02})',
        'md-down': '(max-width: #{map.get($grid-breakpoints, 'lg') - 0.02})',
        'lg-down': '(max-width: #{map.get($grid-breakpoints, 'xl') - 0.02})',
        'xl-down': '(max-width: #{map.get($grid-breakpoints, 'xxl') - 0.02})',
    ),
    $display-breakpoints
);

$scale-from: $breakpoint-sm;
$scale-to: $breakpoint-xl;



/*
    ## Spacers

    Spacers in Evance are based on a percentage of `1rem` (based on `16px`).
 */
$spacers: (
    0: 0,
    25: 0.125rem,
    50: 0.25rem,
    75: 0.375rem,
    100: 0.5rem,
    150: 0.75rem,
    200: 1rem,
    250: 1.25rem,
    300: 1.5rem,
    400: 2rem,
    500: 2.5rem,
    600: 3rem,
    800: 4rem,
    1000: 5rem,
    1200: 6rem,
    1600: 8rem
) !default;

$negative-spacers: () !default;
@each $key, $value in $spacers {
    $negative-spacers: map.merge($negative-spacers, (n#{$key}: -#{$value}));
}


/**
    ## Text
 */
$headings: (
    1: (min: 1.375rem, max: 2.375rem),
    2: (min: 1.25rem, max: 2rem),
    3: (min: 1.125rem, max: 1.5rem),
    4: (min: 1rem, max: 1.25rem),
    5: (min: 0.925rem, max: 1rem),
    6: (min: 0.875rem, max: 0.875rem)
);
$text: (
    subtitle: (min: 1rem, max: 1.125rem),
    large: (min: 1rem, max: 1rem),
    medium: (min: 0.875rem, max: 0.875rem),
    small: (min: 0.75rem, max: 0.75rem),
    eyebrow: (min: 0.6875rem, max: 0.6875rem)
);
$font-weights: () !default;
$font-weights: map-deep-merge(
    (
        'thin': 100,
        'light': 300,
        'regular': 400,
        'medium': 500,
        'semibold': 600,
        'bold': 700,
        'black': 900
    ),
    $font-weights
);


$rounded: () !default;
$rounded: map-deep-merge(
    (
        0: 0,
        'x-small': var(--rounded-x-small),
        'small': var(--rounded-small),
        null: var(--rounded-medium),
        'large': var(--rounded-large),
        'x-large': var(--rounded-x-large),
        'pill': var(--rounded-pill),
        'circle': var(--rounded-circle)
    ),
    $rounded
);


$border-color-root: var(--stroke) !default;
$border-style-root: solid !default;
$borders: () !default;
$borders: map-deep-merge(
    (
        0: 0,
        null: 1px,
    ),
    $borders
);
@each $key, $border in $borders {
    $borders: map-deep-merge(
        $borders,
        ($key: $border $border-style-root $border-color-root)
    )
}