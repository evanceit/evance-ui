import * as fs from 'fs';
import * as path from 'path';
import process from 'process';

const __dirname = process.cwd();

const glyphDirectories = [
    './src/icons/glyph',
    './src/icons/brand/glyph',
    './src/icons/editor/glyph',
];

/**
 * # checkMissingIconSuffix
 *
 * @param {string[]} svgFiles
 */
function checkMissingIconSuffix(svgFiles) {
    const invalidFiles = svgFiles.filter(file => {
        const baseName = path.basename(file, '.svg');
        return !baseName.endsWith('Icon') || baseName.endsWith('IconIcon');
    });
    if (invalidFiles.length) {
        console.warn('The following SVG icon files do not have a valid `Icon` suffix.', invalidFiles);
    }
}

/**
 * # removeXmlns
 *
 * @param {string} svg
 * @return {string}
 */
function removeXmlns(svg) {
    return svg.replace(/\s*xmlns="[^"]+"/g, '');
}

function correctSvgFill(svg) {
    return svg.replace(/<svg([^>]*)>/, (match, attributes) => {
        attributes = attributes.replace(/\s*fill="none"/g, '');
        if (!/fill="currentColor"/.test(attributes)) {
            attributes += ' fill="currentColor"';
        }
        return `<svg${attributes}>`;
    });
}

function correctPathFill(svg) {
    svg = svg.replace(/<(?!svg\b)([^>]*)>/g, (match, attributes) => {
        return match.replace(/\s*fill="[^"]*"/g, '');
    });
    return svg;
}

/**
 * # cleanSvgFiles
 *
 * - Remove `xmlns` attributes from SVGs (they're unnecessary).
 *
 * @param {string} directory Directory containing SVGs
 * @param {string[]} svgFiles List of SVG file names
 */
function cleanSvgFiles(directory, svgFiles) {
    svgFiles.forEach(file => {
        const filePath = path.join(directory, file);
        let svgContent = fs.readFileSync(filePath, 'utf-8');
        let cleanedSvg = removeXmlns(svgContent);
        cleanedSvg = correctSvgFill(cleanedSvg);
        cleanedSvg = correctPathFill(cleanedSvg);
        if (svgContent !== cleanedSvg) {
            fs.writeFileSync(filePath, cleanedSvg, 'utf-8');
            console.log(`Cleaned: ${filePath} - removed xmlns or corrected fill`);
        }
    });
}

/**
 * # generateIndex
 *
 * @param {string} directory
 * @param {string[]} svgFiles
 */
function generateIndexFromGlyphs(directory, svgFiles) {
    const iconDirectory = path.dirname(directory);
    const iconIndex = path.join(iconDirectory, 'index.ts');
    const glyph = path.basename(directory);

    const iconExports = svgFiles.map(svg => {
        const icon = path.basename(svg, '.svg');
        return `export { default as ${icon} } from "./${glyph}/${svg}";`;
    }).join("\n");

    const indexContent = `/**
    # Evance UI Icons
    
    Auto-generated by "gen:icons" based on SVGs found in the './${glyph}' directory.
    Do NOT edit this file, it will be overwritten.
*/
${iconExports}`;

    fs.writeFileSync(iconIndex, indexContent, 'utf-8');
}

for (let glyphDirectory of glyphDirectories) {
    const directory = path.resolve(__dirname, glyphDirectory);
    fs.readdir(directory, (err, files) => {
        const svgFiles = files.filter(file => path.extname(file).toLowerCase() === '.svg');
        cleanSvgFiles(directory, svgFiles);
        checkMissingIconSuffix(svgFiles);
        generateIndexFromGlyphs(directory, svgFiles);
    });
}